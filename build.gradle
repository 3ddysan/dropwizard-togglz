apply plugin: 'maven-publish'
apply plugin: 'signing'

allprojects {
    group 'io.github.3ddysan'
    version '0.1-SNAPSHOT'
    ext {
        isReleaseVersion = !version.endsWith("SNAPSHOT")
    }

    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
}

ext {
    dropwizardVersion = "1.0.2"
    togglzVersion = "2.3.0.Final"
    assertjVersion = "3.5.2"
    junitVersion = "4.12"
    mockitoVersion = "2.1.0-RC.1"
}

dependencies {
    compile "io.dropwizard:dropwizard-core:$dropwizardVersion"
    compile "io.dropwizard:dropwizard-auth:$dropwizardVersion"
    compile "org.togglz:togglz-servlet:$togglzVersion"
    compile "org.togglz:togglz-console:$togglzVersion"
    compile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.assertj:assertj-core:$assertjVersion"
    testCompile "junit:junit:$junitVersion"
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    //required { isReleaseVersion }
    sign configurations.archives
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        if(project.hasProperty("keyId") &&
                project.hasProperty("secretKeyRingFile") &&
                project.hasProperty("password")) {
            def id = project.property("keyId")
            def file = project.property("secretKeyRingFile")
            def password = project.property("password")
        } else {
            Console console = System.console()
            console.printf "\n\nWe have to sign some things in this build." +
                    "\n\nPlease enter your signing details.\n\n"

            def id = console.readLine("PGP Key Id: ")
            def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
            def password = console.readPassword("PGP Private Key Password: ")
        }

        allprojects { ext."signing.keyId" = id }
        allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            groupId group
            artifactId name
            version version

            from components.java
            artifact sourceJar
            artifact javadocJar

            pom.withXml {
		        def project = asNode()
                project.appendNode('name', 'Dropwizard Togglz')
                project.appendNode('description', 'Feature Toggles for Dropwizard projects.')
                project.appendNode('packaging', 'jar')
                project.appendNode('url', projectUrl)
		
                def scm = project.appendNode('scm')
                scm.appendNode('url', scmUrl)
                scm.appendNode('connection', connectionUrl)
                scm.appendNode('developerConnection', developerConnectionUrl)
                
                def licenses = project.appendNode('licenses')
                def license = licenses.appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/license/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')
 
                def developers = project.appendNode('developers')
                def developer = developers.appendNode('developer')
                developer.appendNode('id', sonatypeUsername)
                developer.appendNode('name', 'Eduard Weigandt')
                developer.appendNode('email', '3ddysan@users.noreply.github.com')
            }
        }
    }

    repositories {
	mavenLocal()
        maven {
	     credentials {
		username sonatypeUsername
		password sonatypePassword
	      }
            url isReleaseVersion ? mavenReleaseURL : mavenSnapshotURL
        }
    }
}
